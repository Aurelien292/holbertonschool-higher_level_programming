#!/usr/bin/python3
"""
Test de la méthode integer_validator de la classe BaseGeometry
"""

BaseGeometry = __import__('7-base_geometry').BaseGeometry
bg = BaseGeometry()


# Test avec une valeur valide (12)
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)

# Test avec une valeur non valide (chaîne "John" au lieu d'un entier)
>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] name must be an integer

# Test avec un age non valide égale à 0.
>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] age must be greater than 0

# Test avec une valeur non valide inférieure à 0.
>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] distance must be greater than 0

# Test avec une valeur de type booléen (True est un sous-type d'entier)
>>> try:
...     bg.integer_validator("value", True)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] value must be an integer

# Test avec une valeur de type liste (type incorrect)
>>> try:
...     bg.integer_validator("list", [1, 2, 3])
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] list must be an integer

# Test avec une valeur de type flottant (type incorrect)
>>> try:
...     bg.integer_validator("float_value", 5.67)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] float_value must be an integer

# Test avec un entier négatif
>>> try:
...     bg.integer_validator("height", -10)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] height must be greater than 0

# Test avec une valeur valide après des tests invalides
>>> bg.integer_validator("length", 25)
>>> bg.integer_validator("width", 100)

# Test avec un nom d'attribut correct et une valeur correcte
>>> try:
...     bg.integer_validator("width", 100)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
# Aucune exception levée

print("Tous les tests ont réussi.")
